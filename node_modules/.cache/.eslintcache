[{"/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/index.js":"1","/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/App.js":"2","/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/components/pages/Home.js":"3","/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/components/Navbar.js":"4","/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/components/pages/About.js":"5","/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/components/Search.js":"6","/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/components/scatterplot.js":"7"},{"size":304,"mtime":1639015675088,"results":"8","hashOfConfig":"9"},{"size":493,"mtime":1639016229099,"results":"10","hashOfConfig":"9"},{"size":194,"mtime":1638851992124,"results":"11","hashOfConfig":"9"},{"size":449,"mtime":1639016357515,"results":"12","hashOfConfig":"9"},{"size":1459,"mtime":1638999897306,"results":"13","hashOfConfig":"9"},{"size":3936,"mtime":1638853794020,"results":"14","hashOfConfig":"9"},{"size":19073,"mtime":1638999897306,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1sctis4",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/index.js",[],["33","34"],"/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/App.js",[],"/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/components/pages/Home.js",[],"/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/components/Navbar.js",[],"/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/components/pages/About.js",[],"/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/components/Search.js",["35"],"import React, { useEffect, useState } from \"react\";\nimport * as d3 from 'd3';\nimport Scatterplot from './scatterplot';\nimport './Search.css'\nimport 'font-awesome/css/font-awesome.min.css';\n\n\n    function SearchSelect(props) {\n         \n         let [selected, setGame] = useState(''); \n         const [name, setName] = useState('');\n         const [data, setData] = useState([]);\n\n         const handleChange = (e) => {\n            console.log(\"Game Selected: \" + e.target.value);\n            setGame(e.target.value);\n         };\n\n         useEffect(()=> {\n            d3.csv(\"/data/clean_data.csv\")\n               .then((da) =>{\n                  setData(da);\n               })\n         }, []);\n         const [short, setShort] = useState(data);\n         const [dataSet, setDataSet] = useState(data);\n         const [foundGames, setFoundGames] = useState(data)\n\n         \n         const filter = (e) => {\n            const keyword = e.target.value;\n            const placeholder = {id: 999999, Title:\"Select an option\", Platform:\"\", Year:\"\"}\n            if(keyword !== ''){\n               const results = data.filter((game) =>{\n                  return game.Title.toLowerCase().startsWith(keyword.toLowerCase());\n               });\n               setFoundGames(results);\n               if(foundGames.length > 0){\n                  const li = foundGames.slice(0,10);\n                  li.splice(0,0,placeholder);\n                  setShort(li);\n               }\n            }else{\n               setFoundGames(data);\n               if(foundGames.length > 0){\n                  const li = foundGames.slice(0,10);\n                  li.splice(0,0,placeholder);\n                  setShort(li);\n               }\n            }\n            setName(keyword);\n         };\n \n         useEffect(() => {\n            d3.csv(\"/data/clean_data.csv\")\n               .then((da) => {\n                  if(da[selected]){\n                     console.log(da[selected]);\n                  const columns = da.columns;\n                  const list = da.map(function(element){\n                     let count = 0;\n                     columns.forEach(col =>{\n                        if(element[col] === da[selected][col] && element[col]){\n                           count += 1;\n                        }\n                     })\n                     return{\n                        row: element,\n                        value: count\n                     }\n                  })\n                  list.sort((a,b)=>\n                     a.value < b.value\n                  )\n                  setDataSet(list.slice(0, 100));\n                  console.log(dataSet)\n                  return dataSet;\n                  }\n               })\n         },[selected]);\n\n         return (\n         <React.Fragment>\n            <div className=\"container\">\n               <input\n                  type=\"search\"\n                  value={name}\n                  onChange={filter}\n                  className=\"input\"\n                  placeholder=\"&#xf002; Search for a Game\"\n               />\n               <div className=\"game-list\">\n                  <select value={selected} onChange={handleChange} className=\"game-dropdown\">\n                  {short && short.length > 0 ?(\n                     short.map((game) => (\n                        <option key={game.id} className=\"game\" value={game.id}>\n                           {game.Title}\n                           , {game.Platform}\n                           , {game.Year}\n                        </option>\n                     ))\n                  ):(\n                     <option></option>\n                  )}\n                  </select>\n               </div>\n            </div>\n            {dataSet && dataSet.length > 0 ?(\n            <Scatterplot dataSet={dataSet}></Scatterplot>\n            ):(\n               <h1>Select a Game</h1>\n            )}\n         </React.Fragment>\n      );\n   }\n\nexport default SearchSelect;","/home/Panda21/Documents/Emory/2021 - 2022/CS 485/m5-final-deliverables-wii-design/src/components/scatterplot.js",["36","37","38","39"],"import React, {useRef, useEffect, useState} from \"react\";\nimport * as d3 from 'd3';\nimport {legendColor }from \"d3-svg-legend\";\nimport './scatterplot.css'\n\n\nconst Scatterplot = (dataSet) => {\n\n    const svgRef = useRef();\n    const [data, setData] = useState([]);\n    const list = new Array();\n    const cat = useRef('Critic Score');\n    const num = useRef('North America Sales')\n    const col = useRef('Genres')\n\n    const optX = [\n        {value: 'Critic Score', label: 'Critic Score'},\n        {value: 'User Score', label: 'User Score'},\n        {value: 'Global Sales', label: 'Global Sales'},\n        {value: 'North America Sales', label: 'North America Sales'},\n        {value: 'Average Play Length_All PlayStyles', label: 'Average All Playstyles Play Time'},\n        {value: 'Average Play Length_Leisure', label: 'Average Leisure Play Time'}\n    ]\n\n    const optY = [\n        {value: 'North America Sales', label: 'North America Sales'},\n        {value: 'Average Play Length_All PlayStyles', label: 'Average All Playstyles Play Time'},\n        {value: 'Average Play Length_Leisure', label: 'Average Leisure Play Time'},\n        {value: 'Critic Score', label: 'Critic Score'},\n        {value: 'User Score', label: 'User Score'},\n        {value: 'Global Sales', label: 'Global Sales'}\n    ]\n\n    const optColor = [\n        {value: 'Genres', label: 'Genres'},\n        {value: 'Platform', label:'Platform'},\n        {value: 'Developer', label:'Developer'},\n        {value: 'Rating', label: 'Rating'}\n    ]\n\n    const selectionStyle = {\n        display: 'flex',\n        margin: '20px'\n    }\n\n    const chartStyle = {\n        overflow: 'auto',\n        height: '500px',\n        width: '800px',\n        display:'flex',\n    }\n    const tableStyle = {\n        align: 'center',\n        display: 'flex',\n        padding: '20px',\n        margin: '20px'\n     }\n\n    useEffect(()=> {\n        d3.csv(\"/data/clean_data.csv\")\n            .then((da) =>{\n                var list1 = dataSet.dataSet.map((game)=>{\n                    return game.row;\n                })\n                setData(list1);\n        })\n    }, [dataSet.dataSet]);\n\n    useEffect(() => {\n\n        d3.selectAll('circle').remove()\n        d3.selectAll('#legendArea').remove()\n        d3.selectAll('text').remove()\n        d3.selectAll('text').remove()\n        d3.select('#x-cat').selectAll('option').remove()\n        d3.select('#y-cat').selectAll('option').remove()\n        d3.select('#color-cat').selectAll('option').remove()\n\n        cat.current = 'Critic Score';\n        num.current = 'North America Sales'\n        col.current = 'Genres'\n\n        let labelX = '';\n        let labelY = '';\n        //set up color\n        const color = d3.scaleOrdinal()\n            .domain(data.map(function(d) {return d[col.current]}))\n            .range(d3.schemeCategory10)\n\n        //set up container\n        const w = 800;\n        const h = 400;\n        const margin = {top:20, right:20, bottom:30, left:40};\n        const svg = d3.select(svgRef.current)\n            .attr('width', w)\n            .attr('height', h)\n            .style('overflow', 'visible')\n            .style('margin-top', '10px')\n            .style('margin-bottom', '50px')\n            .style('position', 'absolute')\n            .style('left', '100px')\n            .append('g')\n\n        //set options\n        d3.select('#x-cat')\n            .selectAll('option')\n                .data(optX)\n            .join('option')\n            .text(function(d){return d.label})\n            .attr('value', function(d){return d.value})\n            .attr('label', function(d){return d.label})\n\n        d3.select('#y-cat')\n            .selectAll('option')\n                .data(optY)\n            .join('option')\n            .text(function(d){return d.label})\n            .attr('value', function(d){return d.value})\n            .attr('label', function(d){return d.label})\n\n        d3.select('#color-cat')\n            .selectAll('option')\n                .data(optColor)\n            .join('option')\n            .text(function(d){return d.label})\n            .attr('value', function(d){return d.value})\n            .attr('label', function(d){return d.label})\n\n            //setting scales\n            const yScale = d3.scaleLinear()\n                .domain([0, d3.max(data, function(d) {return d[num.current]})])\n                .range([h,0]);\n\n            const xScale = d3.scaleLinear()\n                .domain([0, d3.max(data,function(d) {return d[cat.current]})])\n                .range([0,w])\n\n\n            //set up legend\n            const legend = legendColor()\n                .shapeWidth(20)\n                .shapeHeight(5)\n                .scale(color)\n\n            d3.selectAll('#chartArea')\n                .append('div')\n                .attr('id','legendArea')\n                .style('height', '400px')\n                .style('width', '500px')\n                .style('position', 'absolute')\n                .style('left', '930px')\n                .style('overflow-y', 'scroll')\n                .append('svg')\n                .attr('id', 'legend')\n                .attr('height', '120vh')\n                .attr('width', '100vh')\n                .style('overflow', 'scroll')\n                .style('display', 'flex')\n                .call(legend)\n\n            //set up zoom\n            const zoom = d3.zoom()\n                .on('zoom', zoomed);\n\n            // rescaling\n            function zoomed(e) {\n                const newY = e.transform.rescaleY(yScale)\n                const newX = e.transform.rescaleX(xScale)\n\n                xAxis.call(d3.axisBottom(newX))\n                yAxis.call(d3.axisLeft(newY))\n\n                circle\n                    .selectAll('circle')\n                    .attr('cy', function(d) {return newY(d[num.current])})\n                    .attr('cx', function(d) {return newX(d[cat.current])})\n            }\n    \n        \n            //clipPath - nothing draw outside the area\n\n            svg.append('defs').append('svg:clipPath')\n                .attr(\"id\", \"clip\")\n                .append('svg:rect')\n                .attr('width', w)\n                .attr('height',h)\n                .attr('x', 0)\n                .attr('y',0)\n\n            //invisible rect on top of the chart to recover pointer events\n            svg.append('rect')\n                .attr('width', w)\n                .attr('height',h)\n                .style('fill', 'none')\n                .style('pointer-events', 'all')\n                .call(zoom)\n\n\n            //set up axes\n            const xAxis = d3.select('#x-axis')\n                .attr('transform', `translate(0, ${h})`)\n                .call(d3.axisBottom(xScale))\n            \n            const yAxis = d3.select('#y-axis')\n                //.attr('transform', `translate(0, ${w})`)\n                .call(d3.axisLeft(yScale))\n\n            //set label\n            svg.append('text')\n                .attr('id','x-label')\n                .attr('x', w/2)\n                .attr('y', h+50)\n                .text('Critic Score')\n            \n            svg.append('text')\n                .attr('id', 'y-label')\n                .attr('y', h-450)\n                .attr('x', -320)\n                .attr(\"transform\", \"rotate(270)\")\n                .text('North America Sales')\n\n            //set up tooltip\n            const tooldiv = d3.select('#chartArea')\n                .append('div')\n                .style('visibility', 'hidden')\n                .style('position', 'absolute')\n                .style('background-color', '#ccc')\n                .style('padding', '10px')\n                .style('border-radius', '5px')\n                .style('color', 'black')\n\n            //setting up data\n            const circle = svg.append('g')\n            .attr(\"clip-path\", 'url(#clip)')\n            \n            circle\n                .selectAll('circle')\n                .data(data)\n                .join('circle')\n                    .attr('cx', d => xScale(d[cat.current]))\n                    .attr('cy', d => yScale(d[num.current]))\n                    .attr('r',5)\n                    .attr('fill', d=>color(d[col.current]))\n                    .on('mouseover',(e,d) => {\n                        d3.select(e.currentTarget)\n                            .attr('r', 5*2)\n                            .attr('fill', 'orange')\n                        tooldiv.style('visibility','visible')\n                            .text(`${d['Title']}`)\n                    })\n                    .on('mousemove', (e,d)=>{\n                        tooldiv.style('top', (e.pageY-50) + 'px')\n                            .style('left', (e.pageX-50)+ 'px')\n                    })\n                    .on('mouseout', (e,d) => {\n                        d3.select(e.currentTarget)\n                            .attr('r', 5)\n                            .attr('fill', '#ff00ad')\n                        tooldiv.style('visibility','hidden')\n                    })\n                    .on('click', (e,d)=>{\n                        list.push(d)\n                        var rows = tbody.selectAll(\"tr\")\n                            .data(list)\n                            .join('tr')\n\n                        var cells = rows.selectAll('td')\n                            .data(function(cell) {\n                                return columns.map(function(game) {\n                                    return {\n                                        column: game,\n                                        value: cell[game]\n                                    }\n                                })\n                            }).enter()\n                            .append('td')\n                            .text(function(d) {\n                                return d.value;\n                            });\n                    })\n        \n        //update option\n        function updateX(selectedGroup) {\n            cat.current = selectedGroup\n            console.log(cat.current + ' ' + num.current)\n\n            const newXScale = d3.scaleLinear()\n                .domain([0, d3.max(data,function(d) {return d[cat.current]})])\n                .range([0,w])\n\n            const newYScale = d3.scaleLinear()\n                .domain([0, d3.max(data, function(d) {return d[num.current]})])\n                .range([h,0])\n\n            d3.select('#x-axis')\n                //.attr('transform', `translate(0, ${h})`)\n                .call(d3.axisBottom(newXScale))\n\n            d3.select('#y-axis')\n                //.attr('transform', `translate(0, ${w})`)\n                .call(d3.axisLeft().scale(yScale))\n\n            //set up zoom\n            const zoom = d3.zoom()\n            .on('zoom', zoomed);\n\n            function zoomed(e){\n                const newY = e.transform.rescaleY(newYScale)\n                const newX = e.transform.rescaleX(newXScale)\n\n                xAxis.call(d3.axisBottom(newX))\n                yAxis.call(d3.axisLeft(newY))\n\n                circle\n                    .selectAll('circle')\n                    .attr('cy', function(d) {return newY(d[num.current])})\n                    .attr('cx', function(d) {return newX(d[selectedGroup])})\n            }\n\n            svg.selectAll('rect')\n                .call(zoom)\n\n            circle\n                .selectAll('circle')\n                    .on('mouseover',(e,d) => {\n                        if(selectedGroup !== 'Title') {\n                            d3.select(e.currentTarget)\n                            .attr('r', 5*2)\n                            .attr('fill', 'orange')\n\n                            tooldiv.style('visibility','visible')\n                            .text(`Title: ${d['Title']}  ${labelX}: ${d[selectedGroup]} ${labelY}: ${d[num.current]}`)\n                        }\n                        else {\n                            d3.select(e.currentTarget)\n                            .attr('r', 5*2)\n                            .attr('fill', 'orange')\n\n                            tooldiv.style('visibility','visible')\n                            .text(`${d['Title']}`)\n                        }\n\n                    })\n                .transition()\n                .duration(1000)\n                .attr('fill', d=>color(d['Genres']))\n                .attr('cx', function(d){return newXScale(d[selectedGroup])})    \n                .attr('cy', function(d){return newYScale(d[num.current])})\n            \n        }\n\n        d3.select('#x-cat').on('change', function(e,d) {\n            const selectedOpt = d3.select(this).property('value')\n            labelX = e.target.selectedOptions[0].getAttribute('label')\n            d3.selectAll('#x-label').text(labelX)\n            updateX(selectedOpt);\n        })\n\n        function updateY(selectedGroup) {\n            num.current = selectedGroup\n            console.log(cat.current + ' ' + num.current)\n\n            const newXScale = d3.scaleLinear()\n                .domain([0, d3.max(data,function(d) {return d[cat.current]})])\n                .range([0,w])\n\n            const newYScale = d3.scaleLinear()\n                .domain([0, d3.max(data,function(d){return d[selectedGroup]})])\n                .range([h,0])\n\n            d3.select('#y-axis')\n                .call(d3.axisLeft(newYScale))\n\n            d3.select('#x-axis')\n                .call(d3.axisBottom(newXScale))\n\n                //set up zoom\n            const zoom = d3.zoom()\n            .on('zoom', zoomed);\n\n            function zoomed(e){\n                const newY = e.transform.rescaleY(newYScale)\n                const newX = e.transform.rescaleX(newXScale)\n\n                xAxis.call(d3.axisBottom(newX))\n                yAxis.call(d3.axisLeft(newY))\n\n                circle\n                    .selectAll('circle')\n                    .attr('cy', function(d) {return newY(d[selectedGroup])})\n                    .attr('cx', function(d) {return newX(d[cat.current])})\n            }\n\n            svg.selectAll('rect')\n                .call(zoom)\n\n            circle\n                .selectAll('circle')\n                .transition()\n                .duration(1000)\n                .attr('cy', d=> newYScale(d[selectedGroup]))\n                .attr('cx', function(d){return newXScale(d[cat.current])})\n                .attr('fill', d=>color(d['Genres']))\n            \n        }\n        d3.select('#y-cat').on('change', function(e,d) {\n            const selectedOpt = d3.select(this).property('value');\n            labelY = e.target.selectedOptions[0].getAttribute('label')\n            d3.selectAll('#y-label').text(labelY);\n            updateY(selectedOpt);\n        })\n        function updateColor(selectedGroup) {\n\n            col.current = selectedGroup;\n\n            const color = d3.scaleOrdinal()\n                .domain(data.map(function(d) {return d[selectedGroup]}))\n                .range(d3.schemeCategory10)\n\n                const legend = legendColor()\n                .shapeWidth(20)\n                .shapeHeight(5)\n                .scale(color)\n\n            d3.selectAll('#legendArea').remove()\n            \n            if(selectedGroup === 'Rating') {\n                d3.selectAll('#chartArea')\n                .append('div')\n                .attr('id','legendArea')\n                .style('height', '400px')\n                .style('width', '500px')\n                .style('position', 'absolute')\n                .style('left', '930px')\n                .style('overflow-y', 'scroll')\n                .append('svg')\n                .attr('id', 'legend')\n                .style('overflow', 'scroll')\n                .style('display', 'flex')\n                .call(legend)\n            }\n            else if (selectedGroup === 'Platform') {\n                d3.selectAll('#chartArea')\n                .append('div')\n                .attr('id','legendArea')\n                .style('height', '400px')\n                .style('width', '500px')\n                .style('position', 'absolute')\n                .style('left', '930px')\n                .style('overflow-y', 'scroll')\n                .append('svg')\n                .attr('id', 'legend')\n                .style('overflow', 'scroll')\n                .style('display', 'flex')\n                .call(legend)\n            }\n            else if(selectedGroup === 'Developer') {\n                d3.selectAll('#chartArea')\n                .append('div')\n                .attr('id','legendArea')\n                .style('height', '400px')\n                .style('width', '500px')\n                .style('position', 'absolute')\n                .style('left', '930px')\n                .style('overflow-y', 'scroll')\n                .append('svg')\n                .attr('id', 'legend')\n                .attr('height', '90vh')\n                .style('overflow', 'scroll')\n                .style('display', 'flex')\n                .call(legend)\n            }\n            else {\n            d3.selectAll('#chartArea')\n                .append('div')\n                .attr('id','legendArea')\n                .style('height', '400px')\n                .style('width', '500px')\n                .style('position', 'absolute')\n                .style('left', '930px')\n                .style('overflow-y', 'scroll')\n                .append('svg')\n                .attr('id', 'legend')\n                .attr('height', '120vh')\n                .attr('width', '100vh')\n                .style('overflow', 'scroll')\n                .style('display', 'flex')\n                .call(legend)\n            }\n\n            circle\n                .selectAll('circle')\n                .attr('fill', d => color(d[selectedGroup]))\n        }\n\n        d3.select('#color-cat').on('change', function(e,d) {\n            const selectedOpt = d3.select(this).property('value')\n            updateColor(selectedOpt);\n        })\n\n        d3.selectAll('table').remove()\n        var table = d3.select(\"#tableArea\").append(\"table\")\n        var thead = table.append(\"thead\")\n        var tbody = table.append(\"tbody\")\n\n        const columns = [\n            'Title',\n            'Year',\n            'Platform',\n            'Critic Score',\n            'User Score',\n            'Developer',\n            'Genres',\n            'Rating'\n         ]\n\n        thead.append(\"tr\")\n            .selectAll(\"th\")\n            .data(columns)\n            .join(\"th\")\n            .text(function(d) {\n                return d;\n            })\n   \n    }, [data]);\n\n    return(\n        <React.Fragment>\n            <div className='selection' style={selectionStyle}>\n                <p>Select X Value</p>\n                <select id='x-cat'>Select X Value</select>&nbsp;&nbsp;\n                <p>Select Y Value</p>\n                <select id= 'y-cat'>Select Y Value</select>&nbsp;&nbsp;\n                <p>Select Color Code</p>\n                <select id= 'color-cat'></select>\n            </div>\n            <div id = 'chartArea' style={chartStyle}>\n                <svg ref = {svgRef}>\n                    <g id ='x-axis'></g>\n                    <g id = 'y-axis'></g>\n                </svg>\n            </div>\n            <div id = 'tableArea' style={tableStyle}></div>\n\n            \n        </React.Fragment>\n    )\n}\n\nexport default Scatterplot;\n",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":80,"column":12,"nodeType":"46","endLine":80,"endColumn":22,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":11,"column":18,"nodeType":"50","messageId":"51","endLine":11,"endColumn":29},{"ruleId":"52","severity":1,"message":"53","line":93,"column":15,"nodeType":"54","messageId":"55","endLine":93,"endColumn":21},{"ruleId":"52","severity":1,"message":"56","line":267,"column":29,"nodeType":"54","messageId":"55","endLine":267,"endColumn":34},{"ruleId":"44","severity":1,"message":"57","line":525,"column":8,"nodeType":"46","endLine":525,"endColumn":14,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataSet'. Either include it or remove the dependency array.","ArrayExpression",["61"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-unused-vars","'margin' is assigned a value but never used.","Identifier","unusedVar","'cells' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'list', 'optColor', 'optX', and 'optY'. Either include them or remove the dependency array.",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},"Update the dependencies array to be: [dataSet, selected]",{"range":"67","text":"68"},"Update the dependencies array to be: [data, list, optColor, optX, optY]",{"range":"69","text":"70"},[2718,2728],"[dataSet, selected]",[18281,18287],"[data, list, optColor, optX, optY]"]